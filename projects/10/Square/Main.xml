<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> boolean </keyword>
    <identifier> test </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <SubroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <keyword> main </keyword>
    <symbol> ( </symbol>
    <ParameterList>
    </ParameterList>
    <symbol> ) </symbol>
    <SubroutineBody>
      <symbol> { </symbol>
      <VarDec>
        <keyword> var </keyword>
        <identifier> SquareGame </identifier>
        <identifier> game </identifier>
        <symbol> ; </symbol>
      </VarDec>
      <Statements>
        <Let>
          <keyword> let </keyword>
          <identifier> game </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> SquareGame </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </Let>
        <Do>
          <keyword> do </keyword>
          <identifier> game </identifier>
          <symbol> . </symbol>
          <identifier> run </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </Do>
        <Do>
          <keyword> do </keyword>
          <identifier> game </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </Do>
        <Return>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </Return>
      </Statements>
      <symbol> } </symbol>
    </SubroutineBody>
  </SubroutineDec>
  <SubroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <keyword> more </keyword>
    <symbol> ( </symbol>
    <ParameterList>
    </ParameterList>
    <symbol> ) </symbol>
    <SubroutineBody>
      <symbol> { </symbol>
      <VarDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> , </symbol>
        <identifier> j </identifier>
        <symbol> ; </symbol>
      </VarDec>
      <VarDec>
        <keyword> var </keyword>
        <identifier> String </identifier>
        <identifier> s </identifier>
        <symbol> ; </symbol>
      </VarDec>
      <VarDec>
        <keyword> var </keyword>
        <identifier> Array </identifier>
        <identifier> a </identifier>
        <symbol> ; </symbol>
      </VarDec>
      <Statements>
        <If>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <Statements>
            <Let>
              <keyword> let </keyword>
              <identifier> s </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <stringConstant> string constant </stringConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </Let>
            <Let>
              <keyword> let </keyword>
              <identifier> s </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <keyword> null </keyword>
                </term>
              </expression>
              <symbol> ; </symbol>
            </Let>
            <Let>
              <keyword> let </keyword>
              <identifier> a </identifier>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> a </identifier>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <integerConstant> 2 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </Let>
          </Statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
         <Statements>
           <Let>
             <keyword> let </keyword>
             <identifier> i </identifier>
             <symbol> = </symbol>
             <expression>
               <term>
                 <identifier> i </identifier>
               </term>
               <symbol> * </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <symbol> - </symbol>
                    <term>
                      <identifier> j </identifier>
                    </term>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
             </expression>
             <symbol> ; </symbol>
           </Let>
           <Let>
             <keyword> let </keyword>
             <identifier> j </identifier>
             <symbol> = </symbol>
             <expression>
               <term>
                 <identifier> j </identifier>
               </term>
               <symbol> / </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 2 </integerConstant>
                    </term>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
             </expression>
             <symbol> ; </symbol>
           </Let>
           <Let>
             <keyword> let </keyword>
             <identifier> i </identifier>
             <symbol> = </symbol>
             <expression>
               <term>
                 <identifier> i </identifier>
               </term>
               <symbol> | </symbol>
              <term>
                <identifier> j </identifier>
              </term>
             </expression>
             <symbol> ; </symbol>
           </Let>
         </Statements>
          <symbol> } </symbol>
        </If>
        <Return>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </Return>
      </Statements>
      <symbol> } </symbol>
    </SubroutineBody>
  </SubroutineDec>
  <symbol> } </symbol>
</class>
