// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    /** Initializes the class. */
    static Array ram;
    static Array heap;
    static int freeList;
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = 0;
        let heap[1] = 14334;
        let freeList = heap;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int currentBlock;
        let currentBlock = freeList;
        while(currentBlock > 0){
            if (currentBlock[1] > size + 2){
                let freeList = currentBlock + size + 2;
                let freeList[0] = currentBlock[0];
                let freeList[1] = currentBlock[1];
                return currentBlock+2;
            }
            let currentBlock = currentBlock[1];
        }
        return 0;
    }
    /** De-Frag the freelist block */
    function void deFrag() {
        //todo see : http://nand2tetris-questions-and-answers-forum.52.s1.nabble.com/New-Heap-Management-algorithm-Coursera-version-td4032026.html
        return;
    }    

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[-2] = freeList;
        let freeList = o-2;
        return;
    }    
}
